// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id            String @id
  street        String
  number        String
  neighbourhood String
  state         String
  country       String

  registry_office RegistryOffice?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RegistryOffice {
  id          String @id
  name        String
  logo        String
  description String
  document    String
  phone       String

  clients   User[]
  employees Employee[]

  address    Address? @relation(fields: [address_id], references: [id])
  address_id String?  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Document {
  id       String @id
  hash_id  String
  url      String
  owner_id String
  owner    User   @relation(fields: [owner_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Employee {
  id                 String          @id
  name               String
  password           String
  email              String
  document           String
  phone              String
  role               Role
  registry_office    RegistryOffice? @relation(fields: [registry_office_id], references: [id])
  registry_office_id String?
  tokens             UserTokens[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id       String @id
  name     String
  password String
  username String
  email    String
  document String
  phone    String

  documents          Document[]
  registry_office    RegistryOffice? @relation(fields: [registry_office_id], references: [id])
  registry_office_id String?
  tokens             UserTokens[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserTokens {
  id          String    @id
  token       String
  user_id     String?
  employee_id String?
  expires_at  DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "FKUserToken")
  @@index([employee_id], map: "FKEmployeeToken")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}
